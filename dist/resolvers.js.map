{"version":3,"file":"resolvers.js","sources":["../src/resolvers.ts"],"sourcesContent":["import { assert } from '@ember/debug';\n\nimport _get from 'lodash/get';\nimport _set from 'lodash/set';\n\nimport type { FormidableErrors } from './';\nimport type { GenericObject, ResolverOptions, ValueKey } from './types';\nimport type * as yup from 'yup';\n\nconst formatYupError = (errors: Array<yup.ValidationError>) => {\n  return errors.reduce((acc: FormidableErrors, err) => {\n    const { type, path, errors, value } = err;\n\n    const formattedError = { type: type ?? 'unknown', message: errors.join('\\n'), value };\n\n    assert('FORMIDABLE - Error - We could not find any path', !!path);\n\n    if (_get(acc, path)) {\n      _set(acc, path, [..._get(acc, path), formattedError]);\n    } else {\n      _set(acc, path, [formattedError]);\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const yupValidator = <\n  Values extends GenericObject = GenericObject,\n  ValidatorOptions extends GenericObject = GenericObject,\n>(\n  schema: yup.ObjectSchema<Partial<Values> | Values>,\n  options: Parameters<(typeof schema)['validate']>[1] &\n    ResolverOptions<ValidatorOptions> = {} as ResolverOptions<ValidatorOptions>,\n): ((\n  values: Partial<Values> | Values,\n  context: ResolverOptions<ValidatorOptions>,\n) => Promise<FormidableErrors<ValueKey<Values>>>) => {\n  const { mode = 'async', ...schemaOptions } = options;\n\n  return async (\n    values: Partial<Values> | Values,\n    context: ResolverOptions<ValidatorOptions>,\n  ): Promise<FormidableErrors<ValueKey<Values>>> => {\n    try {\n      await schema[mode === 'sync' ? 'validateSync' : 'validate'](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      return {} as FormidableErrors<keyof Values>;\n    } catch (e) {\n      const error = e as yup.ValidationError;\n\n      if (!error.inner) {\n        throw error;\n      }\n\n      return formatYupError(error.inner);\n    }\n  };\n};\n"],"names":["formatYupError","errors","reduce","acc","err","type","path","value","formattedError","message","join","assert","_get","_set","yupValidator","schema","options","mode","schemaOptions","values","context","Object","assign","abortEarly","e","error","inner"],"mappings":";;;;AASA,MAAMA,cAAc,GAAIC,MAAkC,IAAK;EAC7D,OAAOA,MAAM,CAACC,MAAM,CAAC,CAACC,GAAqB,EAAEC,GAAG,KAAK;IACnD,MAAM;MAAEC,IAAI;MAAEC,IAAI;MAAEL,MAAM;AAAEM,MAAAA,KAAAA;AAAM,KAAC,GAAGH,GAAG,CAAA;AAEzC,IAAA,MAAMI,cAAc,GAAG;MAAEH,IAAI,EAAEA,IAAI,IAAI,SAAS;AAAEI,MAAAA,OAAO,EAAER,MAAM,CAACS,IAAI,CAAC,IAAI,CAAC;AAAEH,MAAAA,KAAAA;KAAO,CAAA;AAErFI,IAAAA,MAAM,CAAC,iDAAiD,EAAE,CAAC,CAACL,IAAI,CAAC,CAAA;AAEjE,IAAA,IAAIM,IAAI,CAACT,GAAG,EAAEG,IAAI,CAAC,EAAE;AACnBO,MAAAA,IAAI,CAACV,GAAG,EAAEG,IAAI,EAAE,CAAC,GAAGM,IAAI,CAACT,GAAG,EAAEG,IAAI,CAAC,EAAEE,cAAc,CAAC,CAAC,CAAA;AACvD,KAAC,MAAM;MACLK,IAAI,CAACV,GAAG,EAAEG,IAAI,EAAE,CAACE,cAAc,CAAC,CAAC,CAAA;AACnC,KAAA;AAEA,IAAA,OAAOL,GAAG,CAAA;GACX,EAAE,EAAE,CAAC,CAAA;AACR,CAAC,CAAA;AAEM,MAAMW,YAAY,GAAGA,CAI1BC,MAAkD,EAClDC,OACmC,GAAG,EAAuC,KAI1B;EACnD,MAAM;AAAEC,IAAAA,IAAI,GAAG,OAAO;IAAE,GAAGC,aAAAA;AAAc,GAAC,GAAGF,OAAO,CAAA;AAEpD,EAAA,OAAO,OACLG,MAAgC,EAChCC,OAA0C,KACM;IAChD,IAAI;AACF,MAAA,MAAML,MAAM,CAACE,IAAI,KAAK,MAAM,GAAG,cAAc,GAAG,UAAU,CAAC,CACzDE,MAAM,EACNE,MAAM,CAACC,MAAM,CAAC;AAAEC,QAAAA,UAAU,EAAE,KAAA;OAAO,EAAEL,aAAa,EAAE;AAAEE,QAAAA,OAAAA;AAAQ,OAAC,CACjE,CAAC,CAAA;AAED,MAAA,OAAO,EAAE,CAAA;KACV,CAAC,OAAOI,CAAC,EAAE;MACV,MAAMC,KAAK,GAAGD,CAAwB,CAAA;AAEtC,MAAA,IAAI,CAACC,KAAK,CAACC,KAAK,EAAE;AAChB,QAAA,MAAMD,KAAK,CAAA;AACb,OAAA;AAEA,MAAA,OAAOzB,cAAc,CAACyB,KAAK,CAACC,KAAK,CAAC,CAAA;AACpC,KAAA;GACD,CAAA;AACH;;;;"}